{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/Project/frontend/src/utils/axios.service.js\";\nimport axios from \"axios\";\nimport { DELETE, GET, PATCH, POST, PUT, API_KEY, USER, OPTION } from \"../app.config\";\nimport Cookies from \"js-cookie\";\nimport { Decryption, Encryption, TOAST_ERROR, logoutRedirection } from \"./common.service\";\nimport { Navigate } from \"react-router-dom\";\n\n/**\r\n * [request description]\r\n * @param  {[string]} url       URL of the API which needs to be consumed by client\r\n * @param  {[string]} method    Method type of the API call currently GET,POST,PUT,DELETE is supported in order suport to more methods add method name to the array -> allowedMethodTypes\r\n * @param  {[JSON]} payload     Payload to be provided to server for sending data\r\n * @param  {[string]} headers   Request Headers required by the server side to process the API call\r\n * @return {[JSON]}             Response provided by the server side code\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst request = async (url, method, token, payload) => {\n  try {\n    const allowedMethodTypes = [GET, POST, PUT, PATCH, DELETE, OPTION];\n    if (allowedMethodTypes.indexOf(method.toLowerCase()) < 0) {\n      //is less than 0, which indicates that the method is not found in the Array.\n      throw new Error(`Invalid method type please provide one of these methods... \\n ${allowedMethodTypes}`);\n    }\n    const headers = {\n      \"api-key\": API_KEY,\n      'Content-Type': 'text/plain',\n      'Accept-language': Cookies.get('languageCW') || 'en',\n      ...(token && {\n        token: Cookies.get('token')\n      })\n    };\n\n    // const result = await axios({ url, method, data: payload, headers });\n    const result = await axios({\n      url,\n      method,\n      data: Encryption(payload, true),\n      headers\n    });\n    let decodeData = await Decryption(result === null || result === void 0 ? void 0 : result.data);\n    if ((decodeData === null || decodeData === void 0 ? void 0 : decodeData.code) === '0') {\n      TOAST_ERROR(decodeData === null || decodeData === void 0 ? void 0 : decodeData.message);\n    }\n    return decodeData;\n  } catch (error) {\n    var _error$response;\n    console.log(error, \"axios errrrr\");\n    let decodeData = await Decryption(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    if ((decodeData === null || decodeData === void 0 ? void 0 : decodeData.code) == -1) {\n      await logoutRedirection();\n      /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this);\n    } else {\n      throw new Error(error);\n    }\n  }\n};\nexport default request;","map":{"version":3,"names":["axios","DELETE","GET","PATCH","POST","PUT","API_KEY","USER","OPTION","Cookies","Decryption","Encryption","TOAST_ERROR","logoutRedirection","Navigate","jsxDEV","_jsxDEV","request","url","method","token","payload","allowedMethodTypes","indexOf","toLowerCase","Error","headers","get","result","data","decodeData","code","message","error","_error$response","console","log","response","to","replace","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/opt/lampp/htdocs/Project/frontend/src/utils/axios.service.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { DELETE, GET, PATCH, POST, PUT, API_KEY, USER, OPTION } from \"../app.config\";\r\nimport Cookies from \"js-cookie\";\r\nimport { Decryption, Encryption, TOAST_ERROR, logoutRedirection } from \"./common.service\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\n/**\r\n * [request description]\r\n * @param  {[string]} url       URL of the API which needs to be consumed by client\r\n * @param  {[string]} method    Method type of the API call currently GET,POST,PUT,DELETE is supported in order suport to more methods add method name to the array -> allowedMethodTypes\r\n * @param  {[JSON]} payload     Payload to be provided to server for sending data\r\n * @param  {[string]} headers   Request Headers required by the server side to process the API call\r\n * @return {[JSON]}             Response provided by the server side code\r\n */\r\n\r\nconst request = async (url, method, token, payload) => {\r\n  try {\r\n    const allowedMethodTypes = [GET, POST, PUT, PATCH, DELETE, OPTION];\r\n\r\n    if (allowedMethodTypes.indexOf(method.toLowerCase()) < 0) {              //is less than 0, which indicates that the method is not found in the Array.\r\n      throw new Error(`Invalid method type please provide one of these methods... \\n ${allowedMethodTypes}`);\r\n    }\r\n    const headers = {\r\n      \"api-key\": API_KEY,\r\n      'Content-Type': 'text/plain',\r\n      'Accept-language': Cookies.get('languageCW') || 'en',\r\n      ...(token && { token: Cookies.get('token') }),\r\n    };\r\n    \r\n    // const result = await axios({ url, method, data: payload, headers });\r\n    const result = await axios({ url, method, data: Encryption(payload, true), headers });\r\n    \r\n    let decodeData = await Decryption(result?.data);\r\n    \r\n    if (decodeData?.code === '0') {\r\n      TOAST_ERROR(decodeData?.message)\r\n    }\r\n    \r\n    return decodeData;\r\n  } catch (error) {\r\n    console.log(error,\"axios errrrr\");\r\n    \r\n    let decodeData = await Decryption(error?.response?.data);\r\n    if (decodeData?.code == -1) {\r\n      await logoutRedirection();\r\n      <Navigate to=\"/\" replace={true} />\r\n    } else {\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n};\r\n\r\nexport default request;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,GAAG,EAAEC,OAAO,EAAEC,IAAI,EAAEC,MAAM,QAAQ,eAAe;AACpF,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,UAAU,EAAEC,UAAU,EAAEC,WAAW,EAAEC,iBAAiB,QAAQ,kBAAkB;AACzF,SAASC,QAAQ,QAAQ,kBAAkB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,OAAO,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAEC,OAAO,KAAK;EACrD,IAAI;IACF,MAAMC,kBAAkB,GAAG,CAACpB,GAAG,EAAEE,IAAI,EAAEC,GAAG,EAAEF,KAAK,EAAEF,MAAM,EAAEO,MAAM,CAAC;IAElE,IAAIc,kBAAkB,CAACC,OAAO,CAACJ,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;MAAe;MACvE,MAAM,IAAIC,KAAK,CAAC,iEAAiEH,kBAAkB,EAAE,CAAC;IACxG;IACA,MAAMI,OAAO,GAAG;MACd,SAAS,EAAEpB,OAAO;MAClB,cAAc,EAAE,YAAY;MAC5B,iBAAiB,EAAEG,OAAO,CAACkB,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI;MACpD,IAAIP,KAAK,IAAI;QAAEA,KAAK,EAAEX,OAAO,CAACkB,GAAG,CAAC,OAAO;MAAE,CAAC;IAC9C,CAAC;;IAED;IACA,MAAMC,MAAM,GAAG,MAAM5B,KAAK,CAAC;MAAEkB,GAAG;MAAEC,MAAM;MAAEU,IAAI,EAAElB,UAAU,CAACU,OAAO,EAAE,IAAI,CAAC;MAAEK;IAAQ,CAAC,CAAC;IAErF,IAAII,UAAU,GAAG,MAAMpB,UAAU,CAACkB,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,IAAI,CAAC;IAE/C,IAAI,CAAAC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEC,IAAI,MAAK,GAAG,EAAE;MAC5BnB,WAAW,CAACkB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEE,OAAO,CAAC;IAClC;IAEA,OAAOF,UAAU;EACnB,CAAC,CAAC,OAAOG,KAAK,EAAE;IAAA,IAAAC,eAAA;IACdC,OAAO,CAACC,GAAG,CAACH,KAAK,EAAC,cAAc,CAAC;IAEjC,IAAIH,UAAU,GAAG,MAAMpB,UAAU,CAACuB,KAAK,aAALA,KAAK,wBAAAC,eAAA,GAALD,KAAK,CAAEI,QAAQ,cAAAH,eAAA,uBAAfA,eAAA,CAAiBL,IAAI,CAAC;IACxD,IAAI,CAAAC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEC,IAAI,KAAI,CAAC,CAAC,EAAE;MAC1B,MAAMlB,iBAAiB,CAAC,CAAC;MACzB,aAAAG,OAAA,CAACF,QAAQ;QAACwB,EAAE,EAAC,GAAG;QAACC,OAAO,EAAE;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACpC,CAAC,MAAM;MACL,MAAM,IAAIlB,KAAK,CAACQ,KAAK,CAAC;IACxB;EACF;AAEF,CAAC;AAED,eAAehB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}