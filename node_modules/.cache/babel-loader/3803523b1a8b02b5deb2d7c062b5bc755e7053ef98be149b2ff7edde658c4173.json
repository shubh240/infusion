{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport CryptoJS from 'crypto-js';\nimport Cookies from \"js-cookie\";\nconst CRYPTO_KEY = 'VLaEQrkAjtcyayabGsadsAbFdBMiMZmV';\nconst CRYPTO_IV = 'VLaEQrkAjtcyayab';\nconst KEY = CryptoJS.enc.Utf8.parse(CRYPTO_KEY);\n_c = KEY;\nconst IV = CryptoJS.enc.Utf8.parse(CRYPTO_IV);\n_c2 = IV;\nconst TOAST_SUCCESS = message => {\n  return toast.success(message);\n};\n_c3 = TOAST_SUCCESS;\nconst TOAST_INFO = message => {\n  return toast.info(message);\n};\n_c4 = TOAST_INFO;\nconst TOAST_ERROR = message => {\n  return toast.error(message);\n};\n_c5 = TOAST_ERROR;\nconst TOAST_WARNING = message => {\n  return toast.warning(message);\n};\n_c6 = TOAST_WARNING;\nexport const Encryption = (request = {}, isStringify) => {\n  const requestData = isStringify ? JSON.stringify(request) : request;\n  let encrypted = CryptoJS.AES.encrypt(requestData, KEY, {\n    iv: IV\n  }).toString();\n  return encrypted;\n};\n_c7 = Encryption;\nexport const Decryption = async response => {\n  let decrypted = await CryptoJS.AES.decrypt(response.toString(), KEY, {\n    iv: IV\n  });\n  let decryptedData = await JSON.parse(decrypted.toString(CryptoJS.enc.Utf8));\n  return decryptedData;\n};\n_c8 = Decryption;\nexport const DecryptionSearch = async response => {\n  try {\n    // Decrypt the response\n    const decrypted = CryptoJS.AES.decrypt(response.toString(CryptoJS.enc.Utf8), KEY, {\n      iv: IV\n    });\n\n    // Convert the decrypted data to a UTF-8 string\n    const decryptedStr = decrypted.toString(CryptoJS.enc.Utf8);\n    return decryptedStr;\n  } catch (error) {\n    console.error('Error during decryption:', error);\n    return null;\n  }\n};\n_c9 = DecryptionSearch;\nexport const PUBLICURL = process.env.PUBLIC_URL;\nexport const logoutRedirection = () => {\n  Cookies.remove('isLoginCA');\n  Cookies.remove('dataCA');\n  Cookies.remove('tokenCA');\n};\nexport { TOAST_SUCCESS, TOAST_INFO, TOAST_ERROR, TOAST_WARNING };\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"KEY\");\n$RefreshReg$(_c2, \"IV\");\n$RefreshReg$(_c3, \"TOAST_SUCCESS\");\n$RefreshReg$(_c4, \"TOAST_INFO\");\n$RefreshReg$(_c5, \"TOAST_ERROR\");\n$RefreshReg$(_c6, \"TOAST_WARNING\");\n$RefreshReg$(_c7, \"Encryption\");\n$RefreshReg$(_c8, \"Decryption\");\n$RefreshReg$(_c9, \"DecryptionSearch\");","map":{"version":3,"names":["toast","CryptoJS","Cookies","CRYPTO_KEY","CRYPTO_IV","KEY","enc","Utf8","parse","_c","IV","_c2","TOAST_SUCCESS","message","success","_c3","TOAST_INFO","info","_c4","TOAST_ERROR","error","_c5","TOAST_WARNING","warning","_c6","Encryption","request","isStringify","requestData","JSON","stringify","encrypted","AES","encrypt","iv","toString","_c7","Decryption","response","decrypted","decrypt","decryptedData","_c8","DecryptionSearch","decryptedStr","console","_c9","PUBLICURL","process","env","PUBLIC_URL","logoutRedirection","remove","$RefreshReg$"],"sources":["/opt/lampp/htdocs/Project/frontend/src/utils/common.service.js"],"sourcesContent":["import { toast } from \"react-toastify\";\nimport CryptoJS from 'crypto-js';\nimport Cookies from \"js-cookie\";\n\nconst CRYPTO_KEY = 'VLaEQrkAjtcyayabGsadsAbFdBMiMZmV'\nconst CRYPTO_IV = 'VLaEQrkAjtcyayab'\n\nconst KEY = CryptoJS.enc.Utf8.parse(CRYPTO_KEY);\nconst IV = CryptoJS.enc.Utf8.parse(CRYPTO_IV);\n\nconst TOAST_SUCCESS = (message) => {\n  return toast.success(message);\n};\n\nconst TOAST_INFO = (message) => {\n  return toast.info(message);\n};\n\nconst TOAST_ERROR = (message) => {\n  return toast.error(message);\n};\n\nconst TOAST_WARNING = (message) => {\n  return toast.warning(message);\n};\n\nexport const Encryption = (request = {}, isStringify) => {\n  const requestData = isStringify ? JSON.stringify(request) : request;\n  let encrypted = CryptoJS.AES.encrypt(requestData, KEY, { iv: IV }).toString();\n  return encrypted\n}\n\nexport const Decryption = async (response) => {\n  let decrypted = await CryptoJS.AES.decrypt(response.toString(), KEY, { iv: IV });\n  let decryptedData = await JSON.parse(decrypted.toString(CryptoJS.enc.Utf8));\n  return decryptedData;\n}\n\nexport const DecryptionSearch = async (response) => {\n  try {\n\n    // Decrypt the response\n    const decrypted = CryptoJS.AES.decrypt(response.toString(CryptoJS.enc.Utf8), KEY, { iv: IV });\n\n    // Convert the decrypted data to a UTF-8 string\n    const decryptedStr = decrypted.toString(CryptoJS.enc.Utf8);\n\n    return decryptedStr;\n  } catch (error) {\n    console.error('Error during decryption:', error);\n    return null;\n  }\n};\n\nexport const PUBLICURL = process.env.PUBLIC_URL\n\nexport const logoutRedirection = () => {\n  Cookies.remove('isLoginCA');\n  Cookies.remove('dataCA');\n  Cookies.remove('tokenCA');\n}\n\n\nexport {\n  TOAST_SUCCESS,\n  TOAST_INFO,\n  TOAST_ERROR,\n  TOAST_WARNING\n};\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}